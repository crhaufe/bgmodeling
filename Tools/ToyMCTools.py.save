"""
"""

import numpy as np
from scipy.stats import rv_discrete
import matplotlib.pyplot as plt

class ToyMCTools:
    """
    """
    def __init__(self, settings):
        self.settings = settings

    def SetSubModel(self, submodel):
        self.submodel = submodel
        # self.GetExpectedRateDist()

    def GetExpectedRateDist(self):
        """
        Get the expected dist for a submodel, normalized by exposure.
        """
        st = self.settings

        if st.toymc_targeted_vals:
            for component in self.submodel.component_list if not component.floated:
                if 'None' in st.toymc_targeted_vals_dc and 'None in st.toymc_targeted_vals_comp:
                    new_exp_rate_dist = self.exp_rate_dist * st.toymc_targeted_vals_mult
                    fixed_dist = np.add(fixed_dist,new_exp_rate_dist))

        fixed_dist = np.sum([component.exp_rate_dist for component in self.submodel.component_list if not component.floated], axis = 0) # (c/kg/yr)
        floated_dist = np.sum([component.exp_rate_dist for component in self.submodel.component_list if component.floated], axis = 0) # (c/kg/yr)
        self.exp_rate_dist = fixed_dist + floated_dist # (c/kg/yr)
        self.exp_rate_dist_integral = np.sum(self.exp_rate_dist)
        self.exp_count_dist_integral = self.exp_rate_dist_integral * self.submodel.exposure

        if False:
            print('ToyMCTools::GetExpectedRateDist(): exposure: %.3f exposure %.3f' % (self.submodel.exposure, np.sum(fixed_dist + floated_dist)/np.sum(self.exp_rate_dist)))
            plt.figure()
            plt.step(st.dft.bin_centers, self.exp_rate_dist, where = 'mid', c = 'k')
            plt.yscale('log', nonposy='clip')
            plt.show()

    def GetExposure(self):
        """
        exposure = draws_n = (toymc_draws / exp_rate_dist_integral) * (self.exp_count_dist_integral / st.largest_exp_count_dist_integral)
        exp_rate_dist_integral * exposure = draws_n = toymc_draws * (self.exp_count_dist_integral / st.largest_exp_count_dist_integral)
        """
        st = self.settings

        # self.exposure = st.toymc_draws / st.largest_exp_rate_dist_integral # st.toymc_draws / np.sum(self.exp_rate_dist)
        # self.exposure_uncert = .01 * self.exposure

        self.exposure = (st.toymc_draws / self.exp_rate_dist_integral) * (self.exp_count_dist_integral / st.largest_exp_count_dist_integral)
        self.exposure_uncert = .01 * self.exposure

        if False:
            print('ToyMCTools::GetNewExposure(): toymc_draws toymc_exposure %d %.3f+/-%.3f (kg*yr)' \
                % (st.toymc_draws, self.exposure, self.exposure_uncert))

        return self.exposure, self.exposure_uncert

    def DrawSamples(self, draws_n = None):
        """
        exposure = draws_n = (toymc_draws / exp_rate_dist_integral) * (self.exp_count_dist_integral / st.largest_exp_count_dist_integral)
        exp_rate_dist_integral * exposure = draws_n = toymc_draws * (self.exp_count_dist_integral / st.largest_exp_count_dist_integral)
        """
        st = self.settings

        if draws_n == None:
            # draws_n = int(np.floor(st.toymc_draws * (np.sum(self.exp_rate_dist)/st.largest_exp_rate_dist_integral)))
            draws_n = int(np.floor( st.toymc_draws * (self.exp_count_dist_integral / st.largest_exp_count_dist_integral) ))

        # INSTANTIATE rv_discrete
        # normalize hist_assay, because rv_discrete seems to require pre-normed values
        pdf = self.exp_rate_dist / np.sum(self.exp_rate_dist) # norm to np.sum of 1, no differential
        # make the bin centers, xBinCenters, into the integers, xBinIndices
        # this is needed since rv_discrete.rvs seems to only produce integers
        bin_indices = (st.dft.bin_centers + st.dft.bin_wid/2.) / st.dft.bin_wid
        # subclass rv_discrete
        rv = rv_discrete(a = st.dft.min, b = st.dft.max, name = 'samples', values = (bin_indices, pdf))

        # DRAW SAMPLES AND PLOT SAMPLED DATA
        # draw samples
        samples = rv.rvs(size = draws_n)
        # the samples are of integers, xBinIndices, so convert them back into values in xRange
        samples = st.dft.bin_wid * samples - st.dft.bin_wid/2.

        if False:
            # HISTOGRAM AND PLOT
            hist_samples = np.histogram(a = samples, bins = st.dft.bins_n, range = st.dft.range, density = False)[0] # (counts)
            figXLabel = 'energy (%.1f keV bins)' % st.dft.bin_wid
            figYLabel = 'counts'
            plt.figure()
            plt.title('samples = %d' % draws_n)
            plt.xlabel(figXLabel)
            plt.ylabel(figYLabel)
            plt.step(st.dft.bin_centers, pdf * draws_n, where = 'mid', c = 'lightgrey', label = 'scaled total assay pdf', zorder = 0)
            # plt.fill_between(xBinCenters, pdf*nSamples, step = 'mid', color = 'lightgrey')
            # plt.step(xBinCenters, hist_samples, where = 'mid', c = 'k', label = 'samples')
            plt.scatter(st.dft.bin_centers, hist_samples, marker = 'o', s = 1, c = 'k', label = 'samples', zorder = 1)
            plt.legend(prop={'size': 5})
            plt.yscale('log', nonposy='clip')
            plt.show()

        return samples
